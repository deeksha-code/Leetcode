Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.


code: loops with set

/**
 * @param {string} s
 * @return {number}
 */
var lengthOfLongestSubstring = function(s) {
    let stringLength=0;
    for(let i=0;i<s.length;i++){
        let currentStringSet=new Set();
        for(let x=i;x<s.length;x++){
            if(currentStringSet.has(s[x])){
                break;
            }
            else{
                currentStringSet.add(s[x]);
            }
        }
        stringLength=Math.max(stringLength,currentStringSet.size)

    }
    return stringLength;

};


code 2:

const a = "abcabcbb";
console.log(a.length);
let finalString = "";

for (let i = 0; i < a.length; i++) {
    let currentString = a[i];
    let iterationString = ""; 

    for (let j = i + 1; j < a.length; j++) {
        let c = j;

        if (a[i] != a[j]  && !(iterationString.includes(a[j]))) {
            currentString += a[j];
            iterationString += a[j];
        } else {
            break;
        }
        console.log("iterationString", iterationString);
    }
    console.log("currentString", currentString);

    if (finalString.length < currentString.length) {  // Fix: Compare length instead of string
        finalString = currentString;
    }
}
console.log("finalString", finalString);
console.log("Length of longest substring:", finalString.length);

