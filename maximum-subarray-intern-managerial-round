Question:

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
1)A subarray is a contiguous part of an array.
Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Example 2:
Input: nums = [1]
Output: 1

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23

Constraints:
1 <= nums.length <= 10^5
-10^4 <= nums[i] <= 10^4


Solution:
const nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4];


let maxSum = 0; // Overall largest sum
for (let i = 0; i < nums.length; i++) {
    let currentSum = nums[i]; // Current subarray sum
    let localMaxSum = nums[i]; // Largest sum of the subarray ending at this position

    for (let j = i + 1; j < nums.length; j++) {
        currentSum = currentSum + nums[j]; // Expand the current subarray

        if (localMaxSum <= currentSum) {
            localMaxSum = currentSum; // Update the local maximum
        }
    }

    if (maxSum < localMaxSum) {
        maxSum = localMaxSum; // Update the overall maximum
    }
}

console.log("Final maximum sum:", maxSum);


