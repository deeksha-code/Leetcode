Problem:
You are given an array prices where prices[i] is the price of a given stock on the i-th day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0

Input: prices = [7, 1, 5, 3, 6, 4] Output: 5 
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. 
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Input: prices = [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transactions are done, and the maximum profit is 0.
Constraints:
1 <= prices.length <= 10^5
0 <= prices[i] <= 10^4

Solution1:

// let prices = [7, 1, 5, 3, 6, 4];
let prices=[7, 6, 4, 3, 1]
let finalProfit=0;
for(let i=0;i<prices.length;i++){
    let currentProfit=0;
    for(let j=i+1;j<prices.length;j++){
        if(currentProfit<prices[j]-prices[i]){
            currentProfit=prices[j]-prices[i];
        }
    }
    if(finalProfit<currentProfit){
        finalProfit=currentProfit
    }
}
console.log("Final profit is",finalProfit)

Solution2:
let minPrice = Infinity; // To track the minimum price so far
let maxProfit = 0; // To track the maximum profit

for (let price of prices) {
    if (price < minPrice) {
        minPrice = price; // Update the minimum price
    } else if (price - minPrice > maxProfit) {
        maxProfit = price - minPrice; // Update the maximum profit
    }
}



